// File: RAM4K.hdl
// -----
// Author: Ihsan TOPALOGLU (itopaloglu83@gmail.com)
// Date: 21 May 2020
// Course: Nand to Tetris, Part 1
//

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Put your code here:
    // Use 3 bit address to select RAM512.
    DMux8Way(in=load, sel=address[9..11], a=loadRAM0, b=loadRAM1, c=loadRAM2, d=loadRAM3, e=loadRAM4, f=loadRAM5, g=loadRAM6, h=loadRAM7);
    // Use 9 bit address to store the input.
    RAM512(in=in, load=loadRAM0, address=address[0..8], out=RAM0);
    RAM512(in=in, load=loadRAM1, address=address[0..8], out=RAM1);
    RAM512(in=in, load=loadRAM2, address=address[0..8], out=RAM2);
    RAM512(in=in, load=loadRAM3, address=address[0..8], out=RAM3);
    RAM512(in=in, load=loadRAM4, address=address[0..8], out=RAM4);
    RAM512(in=in, load=loadRAM5, address=address[0..8], out=RAM5);
    RAM512(in=in, load=loadRAM6, address=address[0..8], out=RAM6);
    RAM512(in=in, load=loadRAM7, address=address[0..8], out=RAM7);
    // Use 3 bit address to select RAM512 block.
    Mux8Way16(a=RAM0, b=RAM1, c=RAM2, d=RAM3, e=RAM4, f=RAM5, g=RAM6, h=RAM7, sel=address[9..11], out=out);
}
